//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file B2PrimaryGeneratorAction.cc
/// \brief Implementation of the B2PrimaryGeneratorAction class

#include "g4root.hh"
#include "B2PrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4Event.hh"
#include "G4ParticleGun.hh"
#include <G4GeneralParticleSource.hh>
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"

#include "Randomize.hh"
#include <math.h>
#include <stdio.h>  
#include <math.h>
#include <stdio.h>
#include <iomanip>
#include <iostream>
#include <ctime>
#include <string>


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B2PrimaryGeneratorAction::B2PrimaryGeneratorAction()
 : G4VUserPrimaryGeneratorAction()
{
  G4int nofParticles = 1;
  fParticleGun = new G4ParticleGun(nofParticles);
  // UNCOMMENT WHEN GPS IS NEEDED //
  //fParticleGun = new G4GeneralParticleSource();
  G4ParticleDefinition* particleDefinition 
    = G4ParticleTable::GetParticleTable()->FindParticle("D0");

  fParticleGun->SetParticleDefinition(particleDefinition);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B2PrimaryGeneratorAction::~B2PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B2PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
  // This function is called at the begining of event

  // In order to avoid dependence of PrimaryGeneratorAction
  // on DetectorConstruction class we get world volume
  // from G4LogicalVolumeStore.

  
  G4LogicalVolume* worldLV
    = G4LogicalVolumeStore::GetInstance()->GetVolume("World");
  G4Box* worldBox = NULL;
  if ( worldLV ) worldBox = dynamic_cast<G4Box*>(worldLV->GetSolid());
  //if ( worldBox ) worldZHalfLength = worldBox->GetZHalfLength();
  //if ( worldBox ) worldYHalfLength = worldBox->GetYHalfLength();
  else  {
    G4cerr << "World volume of box not found." << G4endl;
    G4cerr << "Perhaps you have changed geometry." << G4endl;
    G4cerr << "The gun will be place in the center." << G4endl;
  }
//***********************************************************************//
  FILE *file;
  char datafile[10000];
  char line[10000];
  strcpy(datafile, "/home/aliroot/geant4.10.05/PixelChamber/build_PC216PlanesD0/KinematicsD0_new17.csv");
  
  int eventNumber = 0;
  float X[10001];
  float Y[10001];
  float Z[10001];
  float Px[10001];
  float Py[10001];
  float Pz[10001];
  file = fopen(datafile, "rt");
  
  if (file)
    {
      //
      while (!feof(file))
	{
	  // legge una stringa
	  fgets(line, 10000, file);
	  // get fields
	  double x, y, z, px, py, pz;
	  X[eventNumber]=x;
	  Y[eventNumber]=y;
	  Z[eventNumber]=z;
	  Px[eventNumber]=px;
	  Py[eventNumber]=py;
	  Pz[eventNumber]=pz;	  
	  
	  //
	  eventNumber++;
	  
	  //
	  sscanf(line, "%lf,%lf,%lf,%lf,%lf,%lf", &x, &y, &z, &px, &py, &pz);
	  //std::cout<< "i = "<< nPoints-1 <<" x= "<< X[nPoints-1] << std::endl;
	  
	}
    }
  fclose(file);
  int pippo = anEvent->GetEventID();

  
  //  printf("ID=%d\n",pippo) ;
  // printf("X=%lf\n",X[pippo+1]);

  
  fParticleGun->SetParticleMomentum(G4ThreeVector(Px[pippo+1]*GeV,Py[pippo+1]*GeV,Pz[pippo+1]*GeV));
  fParticleGun->SetParticlePosition(G4ThreeVector(X[pippo+1]*mm, Y[pippo+1]*mm, Z[pippo+1]*mm));
  fParticleGun->GeneratePrimaryVertex(anEvent);

 }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
