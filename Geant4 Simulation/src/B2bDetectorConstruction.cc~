//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file B2bDetectorConstruction.cc
/// \brief Implementation of the B2bDetectorConstruction class
 
#include "B2bDetectorConstruction.hh"
#include "B2bDetectorMessenger.hh"
#include "B2bChamberParameterisation.hh"
#include "B2TrackerSD.hh"

#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4SDManager.hh"

#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVParameterised.hh"
#include "G4GlobalMagFieldMessenger.hh"
#include "G4AutoDelete.hh"
#include "G4PVDivision.hh"

#include "G4GeometryTolerance.hh"
#include "G4GeometryManager.hh"

#include "G4UserLimits.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"

#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4ThreadLocal 
G4GlobalMagFieldMessenger* B2bDetectorConstruction::fMagFieldMessenger = 0;
 
B2bDetectorConstruction::B2bDetectorConstruction()
:G4VUserDetectorConstruction(),
 fnoPixels(0),
 fnoSensors(0),
 fnoBigSensors(0),
 fPixel(NULL),
 fLogicSensor(NULL),
 fLogicBigSensor(NULL), 
 fSensorMaterial(NULL), 
 fStepLimit(NULL), 
 fCheckOverlaps(true)
{

  fMessenger = new B2bDetectorMessenger(this);
  fnoPixels = 0;
  fnoSensors = 0;
  fnoBigSensors = 0;
  fPixel = new G4LogicalVolume*[fnoPixels];
  fLogicSensor = new G4LogicalVolume*[fnoSensors];
  fLogicBigSensor = new G4LogicalVolume*[fnoBigSensors];
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
B2bDetectorConstruction::~B2bDetectorConstruction()
{
  delete [] fPixel;
  delete [] fLogicSensor;
  delete [] fLogicBigSensor;
  delete fStepLimit;
  delete fMessenger;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
G4VPhysicalVolume* B2bDetectorConstruction::Construct()
{
  // Define materials
  DefineMaterials();

  // Define volumes
  return DefineVolumes();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B2bDetectorConstruction::DefineMaterials()
{
  // Material definition 

  G4NistManager* nistManager = G4NistManager::Instance();

  // Air defined using NIST Manager
  nistManager->FindOrBuildMaterial("G4_AIR");

  // Empty space defined using NIST Manager
  nistManager->FindOrBuildMaterial("G4_Galactic");
  
  // Silicon defined using NIST Manager
  fSensorMaterial = nistManager->FindOrBuildMaterial("G4_Si");

  // Print materials
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* B2bDetectorConstruction::DefineVolumes()
{
  G4Material* air  = G4Material::GetMaterial("G4_AIR");
  G4Material* vacuum  = G4Material::GetMaterial("G4_Galactic");
  
  // Sizes of the principal geometrical components (solids)
 
  G4int ColNo = 1024; 
  G4int RawNo = 512;
  //G4int ColNo = 25; 
  //G4int RawNo = 20;
  G4double SensorXdim = 30.*micrometer; 
  G4double SensorYdim = 50.e-6*m;
  G4double SensorZdim = (30.*RawNo)*micrometer;
  G4double BigSensorXdim = (30.*ColNo)*micrometer; 
  G4double BigSensorYdim = 50.e-6*m;
  G4double BigSensorZdim = (30.*RawNo)*micrometer;
  G4double firstPosition = 0*cm; //position of the centre of the first sensor placed
  G4int NbOfSensors = 260;
  fnoPixels = RawNo; 
  fnoSensors = ColNo; 
  G4double SensorSpacing = SensorYdim; // from Sensor center to center!
  G4double worldLength = 50.*mm;
  G4double Pixel_Xdim = 30*micrometer;
  G4double Pixel_Ydim = SensorYdim/2;
  G4double Pixel_Zdim = 30*micrometer;

  // Definitions of Solids, Logical Volumes, Physical Volumes
 G4GeometryManager::GetInstance()->SetWorldMaximumExtent(worldLength);

  G4cout << "Computed tolerance = "
         << G4GeometryTolerance::GetInstance()->GetSurfaceTolerance()/mm
         << " mm" << G4endl;

  //*********************************************//
  //*****************WORLD***********************//
  //*********************************************//
  
  G4Box* worldS
    = new G4Box("world",                                    //its name
                worldLength/2,worldLength/2,worldLength/2); //its size
  G4LogicalVolume* worldLV
    = new G4LogicalVolume(
			  worldS,   //its solid
			  vacuum,      //its material
			  "World"); //its name

  G4VPhysicalVolume* worldPV
    = new G4PVPlacement(
			0,               // no rotation
			G4ThreeVector(), // at (0,0,0)
			worldLV,         // its logical volume
			"World",         // its name
			0,               // its mother  volume
			false,           // no boolean operations
			0,               // copy number
			fCheckOverlaps); // checking overlaps 

//*************************************************************// 
//*************************************************************//
//*************************************************************// 
  //BIG SENSOR

  G4VSolid* BigSensorS
    = new G4Box("Big_Sensor_solid", BigSensorXdim/2, BigSensorYdim/2, BigSensorZdim/2);
  fLogicBigSensor[fnoBigSensors] 
    = new G4LogicalVolume(BigSensorS,fSensorMaterial,"Big_Sensor",0,0,0);

  //STRIPS
  
  G4VSolid* SensorS
    = new G4Box("Sensor_solid", SensorXdim/2, SensorYdim/2, SensorZdim/2);
  fLogicSensor[fnoSensors] 
    = new G4LogicalVolume(SensorS,fSensorMaterial,"Sensor",0,0,0);

  //PIXELS  

  for (G4int k=0; k<RawNo; k++){
    
    G4double Zpos = firstPosition - SensorZdim/2 + Pixel_Zdim * (k+0.5) ;
        
    G4VSolid* PixelSol 
      = new G4Box("PixelSolid", Pixel_Xdim/2, Pixel_Ydim, Pixel_Zdim/2);
    
    G4int number = k;
    
    fPixel[fnoPixels]
      = new G4LogicalVolume(PixelSol, fSensorMaterial, "PixelLog", 0, 0, 0);
    
    new G4PVPlacement(0,                            // no rotation
		      G4ThreeVector(firstPosition, firstPosition, Zpos), // at (x,y,z)
		      fPixel[fnoPixels],        // its logical volume
		      "Pixel_PV",                 // its name
		      fLogicSensor[fnoSensors],
		      false,                        // no boolean operations
		      number,                       // copy number
		      fCheckOverlaps);              // checking overlaps
    
    G4VisAttributes* PixelVisAtt = new G4VisAttributes(G4Colour(1.0,1.0,0.0));
    fPixel[fnoPixels]->SetVisAttributes(PixelVisAtt); 
  }

  for (G4int i=0; i<ColNo; i++){
       
    G4double BigXpos = firstPosition - BigSensorXdim/2 + SensorXdim * (i+0.5) ;
    G4int BigNumber = i;
    G4VPhysicalVolume* sensorPV
      = new G4PVPlacement( 0,               // no rotation
			   G4ThreeVector(BigXpos, firstPosition, firstPosition), // at (0,0,0)
			   fLogicSensor[fnoSensors],         // its logical volume
			   "Sensor_solid",         // its name
			   fLogicBigSensor[fnoBigSensors],               // its mother  volume
			   false,           // no boolean operations
			   BigNumber,               // copy number
			   fCheckOverlaps); // checking overlaps 
    G4VisAttributes* SensorVisAtt = new G4VisAttributes(G4Colour(1.0,1.0,0.0));
    fLogicSensor[fnoSensors]->SetVisAttributes(SensorVisAtt);   
  }
  
  for (G4int j=0; j<NbOfSensors; j++){
    G4double BigYpos = firstPosition -BigSensorYdim*NbOfSensors*0.5 + BigSensorYdim*j;      
    G4int BigNumberj = j;    
    
    G4VPhysicalVolume* bigsensorPV
      = new G4PVPlacement( 0,               // no rotation
			   G4ThreeVector(firstPosition, BigYpos, firstPosition), // at (0,0,0)
			   fLogicBigSensor[fnoBigSensors],         // its logical volume
			   "Big_Sensor_solid",         // its name
			   worldLV,               // its mother  volume
			   false,           // no boolean operations
			   BigNumberj,               // copy number
			   fCheckOverlaps); // checking overlaps   
    G4VisAttributes* BigSensorVisAtt = new G4VisAttributes(G4Colour(1.0,1.0,0.0));
    fLogicBigSensor[fnoBigSensors]->SetVisAttributes(BigSensorVisAtt);   
  }
  
  G4cout << "There are " << NbOfSensors   << " sensors in the tracker region. "
	 << G4endl
	 << "There are " << fnoPixels  << " pixels in every sensor: "
	 << ColNo   << " columns and " << RawNo << " raws. "
	 << G4endl
	 << "The Sensors are " << SensorZdim/micrometer << " micron of "
	 << fSensorMaterial->GetName() << G4endl
	 << "The distance between Sensor is " << SensorSpacing/mm << " mm" 
	 << G4endl;
  
  // Visualization attributes
  
  G4VisAttributes* boxVisAtt= new G4VisAttributes(G4Colour(1.0,1.0,1.0));
  worldLV   ->SetVisAttributes(boxVisAtt); 
  
  
  
  
  // Example of User Limits
  //
  // Below is an example of how to set tracking constraints in a given
  // logical volume
  //
  // Sets a max step length in the tracker region, with G4StepLimiter
  
  G4double maxStep = SensorZdim/ColNo;
  fStepLimit = new G4UserLimits(maxStep);
  worldLV->SetUserLimits(fStepLimit);
  
  return worldPV;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
void B2bDetectorConstruction::ConstructSDandField()
{
  // Sensitive detectors
  
  G4String trackerPixelSDname = "/PixelSensorSD";
  
  B2TrackerSD* aPixelSD = new B2TrackerSD(trackerPixelSDname,
					  "TrackerHitsCollection");
  
  G4SDManager::GetSDMpointer()->AddNewDetector(aPixelSD);
  
  
  SetSensitiveDetector( "PixelLog",  aPixelSD, true );
  
  
  // Create global magnetic field messenger.
  // Uniform magnetic field is then created automatically if
  // the field value is not zero.
  G4ThreeVector fieldValue = G4ThreeVector();
  fMagFieldMessenger = new G4GlobalMagFieldMessenger(fieldValue);
  fMagFieldMessenger->SetVerboseLevel(1);
  
  // Register the field messenger for deleting
  G4AutoDelete::Register(fMagFieldMessenger);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


void B2bDetectorConstruction::SetChamberMaterial(G4String materialName)
{
  G4NistManager* nistManager = G4NistManager::Instance();
  
  G4Material* pttoMaterial =
    nistManager->FindOrBuildMaterial(materialName);
  
  if (fSensorMaterial != pttoMaterial) {
    if ( pttoMaterial ) {
      fSensorMaterial = pttoMaterial;
      if (fLogicSensor[fnoSensors]) fLogicSensor[fnoSensors]->SetMaterial(fSensorMaterial);
      if (fPixel[fnoPixels]) fPixel[fnoPixels]->SetMaterial(fSensorMaterial);
      G4cout
	<< G4endl 
	<< "----> Pixels are made of " << materialName << G4endl;
    } else {
      G4cout
	<< G4endl
	<< "-->  WARNING from SetSensorMaterial : "
	<< materialName << " not found" << G4endl;
    }
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B2bDetectorConstruction::SetMaxStep(G4double maxStep)
{
  if ((fStepLimit)&&(maxStep>0.)) fStepLimit->SetMaxAllowedStep(maxStep);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
